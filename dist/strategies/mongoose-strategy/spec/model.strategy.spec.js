'use strict';

var _chai = require('chai');

var _helpers = require('./helpers');

var _helpers2 = _interopRequireDefault(_helpers);

var _proxy = require('../proxy.model');

var _proxy2 = _interopRequireDefault(_proxy);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe('Model Strategy', function () {
	_proxy2.default.dbModel = _helpers.MockUserModel;
	_proxy2.default.modelName = 'MockUser';

	var mockUser1 = void 0;
	var mockUser2 = void 0;

	before(_helpers2.default.openConnection);

	before(function () {
		return _helpers.MockUserModel.create([{ name: "John Doe", age: 20 }, { name: "Jane Doe", age: 20 }]).then(function (mockUsers) {
			mockUser1 = mockUsers[0];
			mockUser2 = mockUsers[1];
		});
	});

	after(function () {
		return _helpers.MockUserModel.remove({}).exec();
	});

	after(_helpers2.default.closeConnection);

	it('can find a multiple instances with find', function () {
		return _proxy2.default.find({ age: 20 }).then(function (pInstances) {
			var names = pInstances.map(function (pi) {
				return pi.dbInstance.name;
			});
			_chai.assert.isTrue(names.indexOf('John Doe') >= 0);
			_chai.assert.isTrue(names.indexOf('Jane Doe') >= 0);
		});
	});

	it('can find a single instance with findOne', function () {
		return _proxy2.default.findOne({ name: "John Doe", age: 20 }).then(function (pInstance) {
			(0, _chai.expect)(pInstance.dbInstance.age).to.equal(20);
		});
	});

	it('can create an instance with "new"', function () {
		var mockUser3 = new _proxy2.default({ name: 'Jim Smith', age: 25 });
		return mockUser3.dbInstance.save().then(function (dbInstance) {
			(0, _chai.expect)(dbInstance.age).to.equal(25);
			(0, _chai.expect)(dbInstance.name).to.equal('Jim Smith');
		});
	});

	it('can create an instance with create()', function () {
		return _proxy2.default.create({ name: 'Jim Smith', age: 25 }).then(function (pInstance) {
			(0, _chai.expect)(pInstance.dbInstance.age).to.equal(25);
			(0, _chai.expect)(pInstance.dbInstance.name).to.equal('Jim Smith');
		});
	});
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3N0cmF0ZWdpZXMvbW9uZ29vc2Utc3RyYXRlZ3kvc3BlYy9tb2RlbC5zdHJhdGVneS5zcGVjLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUE7O0FBRUE7Ozs7QUFDQTs7Ozs7O0FBRUEsU0FBUyxnQkFBVCxFQUEyQixZQUFZO0FBQ3RDLGlCQUFjLE9BQWQ7QUFDQSxpQkFBYyxTQUFkLEdBQTBCLFVBQTFCOztBQUVBLEtBQUksa0JBQUo7QUFDQSxLQUFJLGtCQUFKOztBQUVBLFFBQU8sa0JBQVEsY0FBZjs7QUFFQSxRQUFPLFlBQVk7QUFDbEIsU0FBTyx1QkFBYyxNQUFkLENBQXFCLENBQUMsRUFBRSxNQUFNLFVBQVIsRUFBb0IsS0FBSyxFQUF6QixFQUFELEVBQWdDLEVBQUUsTUFBTSxVQUFSLEVBQW9CLEtBQUssRUFBekIsRUFBaEMsQ0FBckIsRUFDTCxJQURLLENBQ0EsVUFBVSxTQUFWLEVBQXFCO0FBQzFCLGVBQVksVUFBVSxDQUFWLENBQVo7QUFDQSxlQUFZLFVBQVUsQ0FBVixDQUFaO0FBQ0EsR0FKSyxDQUFQO0FBS0EsRUFORDs7QUFRQSxPQUFNLFlBQVk7QUFDakIsU0FBTyx1QkFBYyxNQUFkLENBQXFCLEVBQXJCLEVBQXlCLElBQXpCLEVBQVA7QUFDQSxFQUZEOztBQUlBLE9BQU0sa0JBQVEsZUFBZDs7QUFFQSxJQUFHLHlDQUFILEVBQThDLFlBQVk7QUFDekQsU0FBTyxnQkFBYyxJQUFkLENBQW1CLEVBQUUsS0FBSyxFQUFQLEVBQW5CLEVBQ0wsSUFESyxDQUNBLFVBQVUsVUFBVixFQUFzQjtBQUMzQixPQUFNLFFBQVEsV0FBVyxHQUFYLENBQWU7QUFBQSxXQUFNLEdBQUcsVUFBSCxDQUFjLElBQXBCO0FBQUEsSUFBZixDQUFkO0FBQ0EsZ0JBQU8sTUFBUCxDQUFjLE1BQU0sT0FBTixDQUFjLFVBQWQsS0FBNkIsQ0FBM0M7QUFDQSxnQkFBTyxNQUFQLENBQWMsTUFBTSxPQUFOLENBQWMsVUFBZCxLQUE2QixDQUEzQztBQUNBLEdBTEssQ0FBUDtBQU1BLEVBUEQ7O0FBU0EsSUFBRyx5Q0FBSCxFQUE4QyxZQUFZO0FBQ3pELFNBQU8sZ0JBQWMsT0FBZCxDQUFzQixFQUFFLE1BQU0sVUFBUixFQUFvQixLQUFLLEVBQXpCLEVBQXRCLEVBQ0wsSUFESyxDQUNBLFVBQVUsU0FBVixFQUFxQjtBQUMxQixxQkFBTyxVQUFVLFVBQVYsQ0FBcUIsR0FBNUIsRUFBaUMsRUFBakMsQ0FBb0MsS0FBcEMsQ0FBMEMsRUFBMUM7QUFDQSxHQUhLLENBQVA7QUFJQSxFQUxEOztBQU9BLElBQUcsbUNBQUgsRUFBd0MsWUFBWTtBQUNuRCxNQUFNLFlBQVksb0JBQWtCLEVBQUUsTUFBTSxXQUFSLEVBQXFCLEtBQUssRUFBMUIsRUFBbEIsQ0FBbEI7QUFDQSxTQUFPLFVBQVUsVUFBVixDQUFxQixJQUFyQixHQUNMLElBREssQ0FDQSxVQUFVLFVBQVYsRUFBc0I7QUFDM0IscUJBQU8sV0FBVyxHQUFsQixFQUF1QixFQUF2QixDQUEwQixLQUExQixDQUFnQyxFQUFoQztBQUNBLHFCQUFPLFdBQVcsSUFBbEIsRUFBd0IsRUFBeEIsQ0FBMkIsS0FBM0IsQ0FBaUMsV0FBakM7QUFDQSxHQUpLLENBQVA7QUFLQSxFQVBEOztBQVNBLElBQUcsc0NBQUgsRUFBMkMsWUFBWTtBQUN0RCxTQUFPLGdCQUFjLE1BQWQsQ0FBcUIsRUFBRSxNQUFNLFdBQVIsRUFBcUIsS0FBSyxFQUExQixFQUFyQixFQUNMLElBREssQ0FDQSxVQUFVLFNBQVYsRUFBcUI7QUFDMUIscUJBQU8sVUFBVSxVQUFWLENBQXFCLEdBQTVCLEVBQWlDLEVBQWpDLENBQW9DLEtBQXBDLENBQTBDLEVBQTFDO0FBQ0EscUJBQU8sVUFBVSxVQUFWLENBQXFCLElBQTVCLEVBQWtDLEVBQWxDLENBQXFDLEtBQXJDLENBQTJDLFdBQTNDO0FBQ0EsR0FKSyxDQUFQO0FBS0EsRUFORDtBQVNBLENBekREIiwiZmlsZSI6Im1vZGVsLnN0cmF0ZWd5LnNwZWMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBleHBlY3QsIGFzc2VydCB9IGZyb20gJ2NoYWknO1xuXG5pbXBvcnQgaGVscGVycywgeyBNb2NrVXNlck1vZGVsIH0gZnJvbSAnLi9oZWxwZXJzJztcbmltcG9ydCBNb2RlbFN0cmF0ZWd5IGZyb20gJy4uL3Byb3h5Lm1vZGVsJztcblxuZGVzY3JpYmUoJ01vZGVsIFN0cmF0ZWd5JywgZnVuY3Rpb24gKCkge1xuXHRNb2RlbFN0cmF0ZWd5LmRiTW9kZWwgPSBNb2NrVXNlck1vZGVsO1xuXHRNb2RlbFN0cmF0ZWd5Lm1vZGVsTmFtZSA9ICdNb2NrVXNlcic7XG5cblx0bGV0IG1vY2tVc2VyMTtcblx0bGV0IG1vY2tVc2VyMjtcblxuXHRiZWZvcmUoaGVscGVycy5vcGVuQ29ubmVjdGlvbik7XG5cblx0YmVmb3JlKGZ1bmN0aW9uICgpIHtcblx0XHRyZXR1cm4gTW9ja1VzZXJNb2RlbC5jcmVhdGUoW3sgbmFtZTogXCJKb2huIERvZVwiLCBhZ2U6IDIwIH0sIHsgbmFtZTogXCJKYW5lIERvZVwiLCBhZ2U6IDIwIH1dKVxuXHRcdFx0LnRoZW4oZnVuY3Rpb24gKG1vY2tVc2Vycykge1xuXHRcdFx0XHRtb2NrVXNlcjEgPSBtb2NrVXNlcnNbMF07XG5cdFx0XHRcdG1vY2tVc2VyMiA9IG1vY2tVc2Vyc1sxXTtcblx0XHRcdH0pXG5cdH0pO1xuXG5cdGFmdGVyKGZ1bmN0aW9uICgpIHtcblx0XHRyZXR1cm4gTW9ja1VzZXJNb2RlbC5yZW1vdmUoe30pLmV4ZWMoKTtcblx0fSk7XG5cblx0YWZ0ZXIoaGVscGVycy5jbG9zZUNvbm5lY3Rpb24pO1xuXG5cdGl0KCdjYW4gZmluZCBhIG11bHRpcGxlIGluc3RhbmNlcyB3aXRoIGZpbmQnLCBmdW5jdGlvbiAoKSB7XG5cdFx0cmV0dXJuIE1vZGVsU3RyYXRlZ3kuZmluZCh7IGFnZTogMjAgfSlcblx0XHRcdC50aGVuKGZ1bmN0aW9uIChwSW5zdGFuY2VzKSB7XG5cdFx0XHRcdGNvbnN0IG5hbWVzID0gcEluc3RhbmNlcy5tYXAocGkgPT4gcGkuZGJJbnN0YW5jZS5uYW1lKVxuXHRcdFx0XHRhc3NlcnQuaXNUcnVlKG5hbWVzLmluZGV4T2YoJ0pvaG4gRG9lJykgPj0gMClcblx0XHRcdFx0YXNzZXJ0LmlzVHJ1ZShuYW1lcy5pbmRleE9mKCdKYW5lIERvZScpID49IDApXG5cdFx0XHR9KVxuXHR9KTtcblxuXHRpdCgnY2FuIGZpbmQgYSBzaW5nbGUgaW5zdGFuY2Ugd2l0aCBmaW5kT25lJywgZnVuY3Rpb24gKCkge1xuXHRcdHJldHVybiBNb2RlbFN0cmF0ZWd5LmZpbmRPbmUoeyBuYW1lOiBcIkpvaG4gRG9lXCIsIGFnZTogMjAgfSlcblx0XHRcdC50aGVuKGZ1bmN0aW9uIChwSW5zdGFuY2UpIHtcblx0XHRcdFx0ZXhwZWN0KHBJbnN0YW5jZS5kYkluc3RhbmNlLmFnZSkudG8uZXF1YWwoMjApO1xuXHRcdFx0fSlcblx0fSk7XG5cblx0aXQoJ2NhbiBjcmVhdGUgYW4gaW5zdGFuY2Ugd2l0aCBcIm5ld1wiJywgZnVuY3Rpb24gKCkge1xuXHRcdGNvbnN0IG1vY2tVc2VyMyA9IG5ldyBNb2RlbFN0cmF0ZWd5KHsgbmFtZTogJ0ppbSBTbWl0aCcsIGFnZTogMjUgfSlcblx0XHRyZXR1cm4gbW9ja1VzZXIzLmRiSW5zdGFuY2Uuc2F2ZSgpXG5cdFx0XHQudGhlbihmdW5jdGlvbiAoZGJJbnN0YW5jZSkge1xuXHRcdFx0XHRleHBlY3QoZGJJbnN0YW5jZS5hZ2UpLnRvLmVxdWFsKDI1KTtcblx0XHRcdFx0ZXhwZWN0KGRiSW5zdGFuY2UubmFtZSkudG8uZXF1YWwoJ0ppbSBTbWl0aCcpO1xuXHRcdFx0fSlcblx0fSk7XG5cblx0aXQoJ2NhbiBjcmVhdGUgYW4gaW5zdGFuY2Ugd2l0aCBjcmVhdGUoKScsIGZ1bmN0aW9uICgpIHtcblx0XHRyZXR1cm4gTW9kZWxTdHJhdGVneS5jcmVhdGUoeyBuYW1lOiAnSmltIFNtaXRoJywgYWdlOiAyNSB9KVxuXHRcdFx0LnRoZW4oZnVuY3Rpb24gKHBJbnN0YW5jZSkge1xuXHRcdFx0XHRleHBlY3QocEluc3RhbmNlLmRiSW5zdGFuY2UuYWdlKS50by5lcXVhbCgyNSk7XG5cdFx0XHRcdGV4cGVjdChwSW5zdGFuY2UuZGJJbnN0YW5jZS5uYW1lKS50by5lcXVhbCgnSmltIFNtaXRoJyk7XG5cdFx0XHR9KVxuXHR9KTtcblxuXG59KTsiXX0=