"use strict";

var expect = require("chai").expect;
var assert = require("chai").assert;
var helpers = require('./helpers');

describe('Model Strategy', function () {
	var ModelStrategy = require('../proxy.model.js');
	var MockUserModel = require('./helpers').MockUserModel;
	ModelStrategy.dbModel = MockUserModel;
	ModelStrategy.modelName = 'MockUser';

	var mockUser1 = void 0;
	var mockUser2 = void 0;

	before(helpers.openConnection);

	before(function () {
		return MockUserModel.create([{ name: "John Doe", age: 20 }, { name: "Jane Doe", age: 20 }]).then(function (mockUsers) {
			mockUser1 = mockUsers[0];
			mockUser2 = mockUsers[1];
		});
	});

	after(function () {
		return MockUserModel.remove({}).exec();
	});

	after(helpers.closeConnection);

	it('can find a multiple instances with find', function () {
		return ModelStrategy.find({ age: 20 }).then(function (pInstances) {
			var names = pInstances.map(function (pi) {
				return pi.dbInstance.name;
			});
			assert.isTrue(names.indexOf('John Doe') >= 0);
			assert.isTrue(names.indexOf('Jane Doe') >= 0);
		});
	});

	it('can find a single instance with findOne', function () {
		return ModelStrategy.findOne({ name: "John Doe", age: 20 }).then(function (pInstance) {
			expect(pInstance.dbInstance.age).to.equal(20);
			expect(pInstance.dbInstance.id).to.equal(mockUser1.id);
			expect(pInstance.dbInstance.id).to.not.equal(mockUser2.id);
		});
	});

	it('can create an instance with "new"', function () {
		var mockUser3 = new ModelStrategy({ name: 'Jim Smith', age: 25 });
		return mockUser3.dbInstance.save().then(function (dbInstance) {
			expect(dbInstance.age).to.equal(25);
			expect(dbInstance.name).to.equal('Jim Smith');
		});
	});

	it('can create an instance with create()', function () {
		return ModelStrategy.create({ name: 'Jim Smith', age: 25 }).then(function (pInstance) {
			expect(pInstance.dbInstance.age).to.equal(25);
			expect(pInstance.dbInstance.name).to.equal('Jim Smith');
		});
	});
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3N0cmF0ZWdpZXMvbW9uZ29vc2Utc3RyYXRlZ3kvc3BlYy9tb2RlbC5zdHJhdGVneS5zcGVjLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsSUFBTSxTQUFTLFFBQVEsTUFBUixFQUFnQixNQUEvQjtBQUNBLElBQU0sU0FBUyxRQUFRLE1BQVIsRUFBZ0IsTUFBL0I7QUFDQSxJQUFNLFVBQVUsUUFBUSxXQUFSLENBQWhCOztBQUVBLFNBQVMsZ0JBQVQsRUFBMkIsWUFBVztBQUNyQyxLQUFNLGdCQUFnQixRQUFRLG1CQUFSLENBQXRCO0FBQ0EsS0FBTSxnQkFBZ0IsUUFBUSxXQUFSLEVBQXFCLGFBQTNDO0FBQ0EsZUFBYyxPQUFkLEdBQXdCLGFBQXhCO0FBQ0EsZUFBYyxTQUFkLEdBQTBCLFVBQTFCOztBQUVBLEtBQUksa0JBQUo7QUFDQyxLQUFJLGtCQUFKOztBQUVELFFBQU8sUUFBUSxjQUFmOztBQUVBLFFBQU8sWUFBVztBQUNqQixTQUFPLGNBQWMsTUFBZCxDQUFxQixDQUFDLEVBQUMsTUFBTSxVQUFQLEVBQW1CLEtBQUssRUFBeEIsRUFBRCxFQUE4QixFQUFDLE1BQU0sVUFBUCxFQUFtQixLQUFLLEVBQXhCLEVBQTlCLENBQXJCLEVBQ04sSUFETSxDQUNELFVBQVMsU0FBVCxFQUFtQjtBQUN4QixlQUFZLFVBQVUsQ0FBVixDQUFaO0FBQ0EsZUFBWSxVQUFVLENBQVYsQ0FBWjtBQUNBLEdBSk0sQ0FBUDtBQUtBLEVBTkQ7O0FBUUEsT0FBTSxZQUFXO0FBQ2hCLFNBQU8sY0FBYyxNQUFkLENBQXFCLEVBQXJCLEVBQXlCLElBQXpCLEVBQVA7QUFDQSxFQUZEOztBQUlBLE9BQU0sUUFBUSxlQUFkOztBQUVBLElBQUcseUNBQUgsRUFBOEMsWUFBVztBQUN4RCxTQUFPLGNBQWMsSUFBZCxDQUFtQixFQUFDLEtBQUssRUFBTixFQUFuQixFQUNOLElBRE0sQ0FDRCxVQUFTLFVBQVQsRUFBcUI7QUFDMUIsT0FBTSxRQUFRLFdBQVcsR0FBWCxDQUFlO0FBQUEsV0FBSyxHQUFHLFVBQUgsQ0FBYyxJQUFuQjtBQUFBLElBQWYsQ0FBZDtBQUNBLFVBQU8sTUFBUCxDQUFjLE1BQU0sT0FBTixDQUFjLFVBQWQsS0FBNEIsQ0FBMUM7QUFDQSxVQUFPLE1BQVAsQ0FBYyxNQUFNLE9BQU4sQ0FBYyxVQUFkLEtBQTRCLENBQTFDO0FBQ0EsR0FMTSxDQUFQO0FBTUMsRUFQRjs7QUFTQSxJQUFHLHlDQUFILEVBQThDLFlBQVc7QUFDeEQsU0FBTyxjQUFjLE9BQWQsQ0FBc0IsRUFBQyxNQUFNLFVBQVAsRUFBbUIsS0FBSyxFQUF4QixFQUF0QixFQUNOLElBRE0sQ0FDRCxVQUFTLFNBQVQsRUFBb0I7QUFDekIsVUFBTyxVQUFVLFVBQVYsQ0FBcUIsR0FBNUIsRUFBaUMsRUFBakMsQ0FBb0MsS0FBcEMsQ0FBMEMsRUFBMUM7QUFDQSxVQUFPLFVBQVUsVUFBVixDQUFxQixFQUE1QixFQUFnQyxFQUFoQyxDQUFtQyxLQUFuQyxDQUF5QyxVQUFVLEVBQW5EO0FBQ0EsVUFBTyxVQUFVLFVBQVYsQ0FBcUIsRUFBNUIsRUFBZ0MsRUFBaEMsQ0FBbUMsR0FBbkMsQ0FBdUMsS0FBdkMsQ0FBNkMsVUFBVSxFQUF2RDtBQUNBLEdBTE0sQ0FBUDtBQU1DLEVBUEY7O0FBU0EsSUFBRyxtQ0FBSCxFQUF3QyxZQUFXO0FBQ2xELE1BQU0sWUFBWSxJQUFJLGFBQUosQ0FBa0IsRUFBQyxNQUFNLFdBQVAsRUFBb0IsS0FBSyxFQUF6QixFQUFsQixDQUFsQjtBQUNBLFNBQU8sVUFBVSxVQUFWLENBQXFCLElBQXJCLEdBQ04sSUFETSxDQUNELFVBQVMsVUFBVCxFQUFvQjtBQUN6QixVQUFPLFdBQVcsR0FBbEIsRUFBdUIsRUFBdkIsQ0FBMEIsS0FBMUIsQ0FBZ0MsRUFBaEM7QUFDQSxVQUFPLFdBQVcsSUFBbEIsRUFBd0IsRUFBeEIsQ0FBMkIsS0FBM0IsQ0FBaUMsV0FBakM7QUFDQSxHQUpNLENBQVA7QUFLQyxFQVBGOztBQVNBLElBQUcsc0NBQUgsRUFBMkMsWUFBVztBQUNyRCxTQUFPLGNBQWMsTUFBZCxDQUFxQixFQUFDLE1BQU0sV0FBUCxFQUFvQixLQUFLLEVBQXpCLEVBQXJCLEVBQ04sSUFETSxDQUNELFVBQVMsU0FBVCxFQUFtQjtBQUN4QixVQUFPLFVBQVUsVUFBVixDQUFxQixHQUE1QixFQUFpQyxFQUFqQyxDQUFvQyxLQUFwQyxDQUEwQyxFQUExQztBQUNBLFVBQU8sVUFBVSxVQUFWLENBQXFCLElBQTVCLEVBQWtDLEVBQWxDLENBQXFDLEtBQXJDLENBQTJDLFdBQTNDO0FBQ0EsR0FKTSxDQUFQO0FBS0MsRUFORjtBQVNBLENBN0REIiwiZmlsZSI6Im1vZGVsLnN0cmF0ZWd5LnNwZWMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBleHBlY3QgPSByZXF1aXJlKFwiY2hhaVwiKS5leHBlY3Q7XG5jb25zdCBhc3NlcnQgPSByZXF1aXJlKFwiY2hhaVwiKS5hc3NlcnQ7XG5jb25zdCBoZWxwZXJzID0gcmVxdWlyZSgnLi9oZWxwZXJzJyk7XG5cbmRlc2NyaWJlKCdNb2RlbCBTdHJhdGVneScsIGZ1bmN0aW9uKCkge1xuXHRjb25zdCBNb2RlbFN0cmF0ZWd5ID0gcmVxdWlyZSgnLi4vcHJveHkubW9kZWwuanMnKTtcblx0Y29uc3QgTW9ja1VzZXJNb2RlbCA9IHJlcXVpcmUoJy4vaGVscGVycycpLk1vY2tVc2VyTW9kZWw7XG5cdE1vZGVsU3RyYXRlZ3kuZGJNb2RlbCA9IE1vY2tVc2VyTW9kZWw7XG5cdE1vZGVsU3RyYXRlZ3kubW9kZWxOYW1lID0gJ01vY2tVc2VyJztcblxuXHRsZXQgbW9ja1VzZXIxO1xuICBsZXQgbW9ja1VzZXIyO1xuXG5cdGJlZm9yZShoZWxwZXJzLm9wZW5Db25uZWN0aW9uKTtcblxuXHRiZWZvcmUoZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIE1vY2tVc2VyTW9kZWwuY3JlYXRlKFt7bmFtZTogXCJKb2huIERvZVwiLCBhZ2U6IDIwfSwge25hbWU6IFwiSmFuZSBEb2VcIiwgYWdlOiAyMH1dKVxuXHRcdC50aGVuKGZ1bmN0aW9uKG1vY2tVc2Vycyl7XG5cdFx0XHRtb2NrVXNlcjEgPSBtb2NrVXNlcnNbMF07XG5cdFx0XHRtb2NrVXNlcjIgPSBtb2NrVXNlcnNbMV07XG5cdFx0fSlcblx0fSk7XG5cblx0YWZ0ZXIoZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIE1vY2tVc2VyTW9kZWwucmVtb3ZlKHt9KS5leGVjKCk7XG5cdH0pO1xuXG5cdGFmdGVyKGhlbHBlcnMuY2xvc2VDb25uZWN0aW9uKTtcblx0XG5cdGl0KCdjYW4gZmluZCBhIG11bHRpcGxlIGluc3RhbmNlcyB3aXRoIGZpbmQnLCBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gTW9kZWxTdHJhdGVneS5maW5kKHthZ2U6IDIwfSlcblx0XHQudGhlbihmdW5jdGlvbihwSW5zdGFuY2VzKSB7XG5cdFx0XHRjb25zdCBuYW1lcyA9IHBJbnN0YW5jZXMubWFwKHBpPT4gcGkuZGJJbnN0YW5jZS5uYW1lKVxuXHRcdFx0YXNzZXJ0LmlzVHJ1ZShuYW1lcy5pbmRleE9mKCdKb2huIERvZScpID49MClcblx0XHRcdGFzc2VydC5pc1RydWUobmFtZXMuaW5kZXhPZignSmFuZSBEb2UnKSA+PTApXG5cdFx0fSlcbiAgfSk7XG5cblx0aXQoJ2NhbiBmaW5kIGEgc2luZ2xlIGluc3RhbmNlIHdpdGggZmluZE9uZScsIGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBNb2RlbFN0cmF0ZWd5LmZpbmRPbmUoe25hbWU6IFwiSm9obiBEb2VcIiwgYWdlOiAyMH0pXG5cdFx0LnRoZW4oZnVuY3Rpb24ocEluc3RhbmNlKSB7XG5cdFx0XHRleHBlY3QocEluc3RhbmNlLmRiSW5zdGFuY2UuYWdlKS50by5lcXVhbCgyMCk7XG5cdFx0XHRleHBlY3QocEluc3RhbmNlLmRiSW5zdGFuY2UuaWQpLnRvLmVxdWFsKG1vY2tVc2VyMS5pZClcblx0XHRcdGV4cGVjdChwSW5zdGFuY2UuZGJJbnN0YW5jZS5pZCkudG8ubm90LmVxdWFsKG1vY2tVc2VyMi5pZClcblx0XHR9KVxuICB9KTtcblx0XG5cdGl0KCdjYW4gY3JlYXRlIGFuIGluc3RhbmNlIHdpdGggXCJuZXdcIicsIGZ1bmN0aW9uKCkge1xuXHRcdGNvbnN0IG1vY2tVc2VyMyA9IG5ldyBNb2RlbFN0cmF0ZWd5KHtuYW1lOiAnSmltIFNtaXRoJywgYWdlOiAyNX0pXG5cdFx0cmV0dXJuIG1vY2tVc2VyMy5kYkluc3RhbmNlLnNhdmUoKVxuXHRcdC50aGVuKGZ1bmN0aW9uKGRiSW5zdGFuY2Upe1xuXHRcdFx0ZXhwZWN0KGRiSW5zdGFuY2UuYWdlKS50by5lcXVhbCgyNSk7XG5cdFx0XHRleHBlY3QoZGJJbnN0YW5jZS5uYW1lKS50by5lcXVhbCgnSmltIFNtaXRoJyk7XG5cdFx0fSlcbiAgfSk7XG5cdFxuXHRpdCgnY2FuIGNyZWF0ZSBhbiBpbnN0YW5jZSB3aXRoIGNyZWF0ZSgpJywgZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIE1vZGVsU3RyYXRlZ3kuY3JlYXRlKHtuYW1lOiAnSmltIFNtaXRoJywgYWdlOiAyNX0pXG5cdFx0LnRoZW4oZnVuY3Rpb24ocEluc3RhbmNlKXtcblx0XHRcdGV4cGVjdChwSW5zdGFuY2UuZGJJbnN0YW5jZS5hZ2UpLnRvLmVxdWFsKDI1KTtcblx0XHRcdGV4cGVjdChwSW5zdGFuY2UuZGJJbnN0YW5jZS5uYW1lKS50by5lcXVhbCgnSmltIFNtaXRoJyk7XG5cdFx0fSlcbiAgfSk7XG5cblxufSk7Il19