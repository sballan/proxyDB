"use strict";

var expect = require("chai").expect;
var mongoose = require("../index").dbManager;

var InstanceConstructor = require('../proxy.instance.js');
var helpers = require('./helpers');

describe('Instance Strategy', function () {
	var MockUserModel = helpers.MockUserModel;
	var DBURI = helpers.DBURI;
	var mockUser = void 0;
	var InstanceStrategy = void 0;

	before(helpers.openConnection);

	beforeEach(function () {
		mockUser = new MockUserModel({ name: "Jane Doe", age: 25 });
		InstanceStrategy = new InstanceConstructor(mockUser);
	});

	afterEach(function () {
		return MockUserModel.remove({}).exec();
	});

	after(helpers.closeConnection);

	it('has reference to Mongoose document instance', function () {
		expect(mockUser.name).to.equal('Jane Doe');
		expect(mockUser.age).to.equal(25);
		expect(InstanceStrategy.dbInstance).to.equal(mockUser);
	});

	it('can refresh its instance', function (done) {
		expect(mockUser.age).to.equal(25);

		return InstanceStrategy.dbInstance.set({ age: 30 }).save() // must be saved before refresh
		.then(function (dbInstance) {
			return InstanceStrategy.refresh();
		}).then(function (refreshedInstance) {
			expect(InstanceStrategy.dbInstance.age).to.equal(30);
			done();
		});
	});

	it('can update its instance', function () {
		return InstanceStrategy.save() // must be saved before refresh
		.then(function (instance) {
			expect(InstanceStrategy.dbInstance.age).to.equal(25);
			return InstanceStrategy.update({ age: 20 });
		}).then(function (instance) {
			expect(instance.dbInstance.age).to.equal(20);
		});
	});

	it('can save its instance', function () {
		expect(InstanceStrategy.dbInstance.age).to.equal(25);
		InstanceStrategy.dbInstance.age = 20;

		return InstanceStrategy.save().then(function (instance) {
			expect(instance.dbInstance.age).to.equal(20);
		});
	});
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3N0cmF0ZWdpZXMvbW9uZ29vc2Utc3RyYXRlZ3kvc3BlYy9pbnN0YW5jZS5zdHJhdGVneS5zcGVjLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsSUFBTSxTQUFTLFFBQVEsTUFBUixFQUFnQixNQUEvQjtBQUNBLElBQU0sV0FBVyxRQUFRLFVBQVIsRUFBb0IsU0FBckM7O0FBRUEsSUFBTSxzQkFBc0IsUUFBUSxzQkFBUixDQUE1QjtBQUNBLElBQU0sVUFBVSxRQUFRLFdBQVIsQ0FBaEI7O0FBRUEsU0FBUyxtQkFBVCxFQUE4QixZQUFXO0FBQ3hDLEtBQU0sZ0JBQWdCLFFBQVEsYUFBOUI7QUFDQSxLQUFNLFFBQVEsUUFBUSxLQUF0QjtBQUNBLEtBQUksaUJBQUo7QUFDQSxLQUFJLHlCQUFKOztBQUdBLFFBQU8sUUFBUSxjQUFmOztBQUVBLFlBQVcsWUFBVztBQUNyQixhQUFXLElBQUksYUFBSixDQUFrQixFQUFDLE1BQU0sVUFBUCxFQUFtQixLQUFLLEVBQXhCLEVBQWxCLENBQVg7QUFDQSxxQkFBbUIsSUFBSSxtQkFBSixDQUF3QixRQUF4QixDQUFuQjtBQUNBLEVBSEQ7O0FBS0EsV0FBVSxZQUFXO0FBQ3BCLFNBQU8sY0FBYyxNQUFkLENBQXFCLEVBQXJCLEVBQXlCLElBQXpCLEVBQVA7QUFDQSxFQUZEOztBQUlBLE9BQU0sUUFBUSxlQUFkOztBQUdBLElBQUcsNkNBQUgsRUFBa0QsWUFBVztBQUM1RCxTQUFPLFNBQVMsSUFBaEIsRUFBc0IsRUFBdEIsQ0FBeUIsS0FBekIsQ0FBK0IsVUFBL0I7QUFDQSxTQUFPLFNBQVMsR0FBaEIsRUFBcUIsRUFBckIsQ0FBd0IsS0FBeEIsQ0FBOEIsRUFBOUI7QUFDRSxTQUFPLGlCQUFpQixVQUF4QixFQUFvQyxFQUFwQyxDQUF1QyxLQUF2QyxDQUE2QyxRQUE3QztBQUNELEVBSkY7O0FBTUEsSUFBRywwQkFBSCxFQUErQixVQUFTLElBQVQsRUFBZTtBQUM3QyxTQUFPLFNBQVMsR0FBaEIsRUFBcUIsRUFBckIsQ0FBd0IsS0FBeEIsQ0FBOEIsRUFBOUI7O0FBRUEsU0FBTyxpQkFBaUIsVUFBakIsQ0FBNEIsR0FBNUIsQ0FBZ0MsRUFBQyxLQUFJLEVBQUwsRUFBaEMsRUFBMEMsSUFBMUMsRUFBaUQ7QUFBakQsR0FDTixJQURNLENBQ0QsVUFBUyxVQUFULEVBQXFCO0FBQzFCLFVBQU8saUJBQWlCLE9BQWpCLEVBQVA7QUFDQSxHQUhNLEVBSU4sSUFKTSxDQUlELFVBQVMsaUJBQVQsRUFBNEI7QUFDakMsVUFBTyxpQkFBaUIsVUFBakIsQ0FBNEIsR0FBbkMsRUFDRSxFQURGLENBQ0ssS0FETCxDQUNXLEVBRFg7QUFFQztBQUNELEdBUk0sQ0FBUDtBQVVDLEVBYkY7O0FBZUEsSUFBRyx5QkFBSCxFQUE4QixZQUFXO0FBQ3hDLFNBQU8saUJBQWlCLElBQWpCLEVBQXdCO0FBQXhCLEdBQ04sSUFETSxDQUNELFVBQVMsUUFBVCxFQUFtQjtBQUN4QixVQUFPLGlCQUFpQixVQUFqQixDQUE0QixHQUFuQyxFQUF3QyxFQUF4QyxDQUEyQyxLQUEzQyxDQUFpRCxFQUFqRDtBQUNBLFVBQU8saUJBQWlCLE1BQWpCLENBQXdCLEVBQUMsS0FBSSxFQUFMLEVBQXhCLENBQVA7QUFDQSxHQUpNLEVBS04sSUFMTSxDQUtELFVBQVMsUUFBVCxFQUFtQjtBQUN4QixVQUFPLFNBQVMsVUFBVCxDQUFvQixHQUEzQixFQUFnQyxFQUFoQyxDQUFtQyxLQUFuQyxDQUF5QyxFQUF6QztBQUNBLEdBUE0sQ0FBUDtBQVNBLEVBVkQ7O0FBWUEsSUFBRyx1QkFBSCxFQUE0QixZQUFXO0FBQ3RDLFNBQU8saUJBQWlCLFVBQWpCLENBQTRCLEdBQW5DLEVBQXdDLEVBQXhDLENBQTJDLEtBQTNDLENBQWlELEVBQWpEO0FBQ0EsbUJBQWlCLFVBQWpCLENBQTRCLEdBQTVCLEdBQWtDLEVBQWxDOztBQUVBLFNBQU8saUJBQWlCLElBQWpCLEdBQ04sSUFETSxDQUNELFVBQVMsUUFBVCxFQUFtQjtBQUN4QixVQUFPLFNBQVMsVUFBVCxDQUFvQixHQUEzQixFQUFnQyxFQUFoQyxDQUFtQyxLQUFuQyxDQUF5QyxFQUF6QztBQUNBLEdBSE0sQ0FBUDtBQUtBLEVBVEQ7QUFZQSxDQWxFRCIsImZpbGUiOiJpbnN0YW5jZS5zdHJhdGVneS5zcGVjLmpzIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgZXhwZWN0ID0gcmVxdWlyZShcImNoYWlcIikuZXhwZWN0O1xuY29uc3QgbW9uZ29vc2UgPSByZXF1aXJlKFwiLi4vaW5kZXhcIikuZGJNYW5hZ2VyO1xuXG5jb25zdCBJbnN0YW5jZUNvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi4vcHJveHkuaW5zdGFuY2UuanMnKVxuY29uc3QgaGVscGVycyA9IHJlcXVpcmUoJy4vaGVscGVycycpO1xuXG5kZXNjcmliZSgnSW5zdGFuY2UgU3RyYXRlZ3knLCBmdW5jdGlvbigpIHtcblx0Y29uc3QgTW9ja1VzZXJNb2RlbCA9IGhlbHBlcnMuTW9ja1VzZXJNb2RlbDtcblx0Y29uc3QgREJVUkkgPSBoZWxwZXJzLkRCVVJJO1xuXHRsZXQgbW9ja1VzZXI7XG5cdGxldCBJbnN0YW5jZVN0cmF0ZWd5OyBcblx0XG5cblx0YmVmb3JlKGhlbHBlcnMub3BlbkNvbm5lY3Rpb24pO1xuXG5cdGJlZm9yZUVhY2goZnVuY3Rpb24oKSB7XG5cdFx0bW9ja1VzZXIgPSBuZXcgTW9ja1VzZXJNb2RlbCh7bmFtZTogXCJKYW5lIERvZVwiLCBhZ2U6IDI1fSlcblx0XHRJbnN0YW5jZVN0cmF0ZWd5ID0gbmV3IEluc3RhbmNlQ29uc3RydWN0b3IobW9ja1VzZXIpO1xuXHR9KVxuXHRcblx0YWZ0ZXJFYWNoKGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBNb2NrVXNlck1vZGVsLnJlbW92ZSh7fSkuZXhlYygpO1xuXHR9KVxuXG5cdGFmdGVyKGhlbHBlcnMuY2xvc2VDb25uZWN0aW9uKTtcblxuXG5cdGl0KCdoYXMgcmVmZXJlbmNlIHRvIE1vbmdvb3NlIGRvY3VtZW50IGluc3RhbmNlJywgZnVuY3Rpb24oKSB7XG5cdFx0ZXhwZWN0KG1vY2tVc2VyLm5hbWUpLnRvLmVxdWFsKCdKYW5lIERvZScpO1xuXHRcdGV4cGVjdChtb2NrVXNlci5hZ2UpLnRvLmVxdWFsKDI1KTtcbiAgICBleHBlY3QoSW5zdGFuY2VTdHJhdGVneS5kYkluc3RhbmNlKS50by5lcXVhbChtb2NrVXNlcik7XG4gIH0pO1xuXG5cdGl0KCdjYW4gcmVmcmVzaCBpdHMgaW5zdGFuY2UnLCBmdW5jdGlvbihkb25lKSB7XG5cdFx0ZXhwZWN0KG1vY2tVc2VyLmFnZSkudG8uZXF1YWwoMjUpO1xuXG5cdFx0cmV0dXJuIEluc3RhbmNlU3RyYXRlZ3kuZGJJbnN0YW5jZS5zZXQoe2FnZTozMH0pLnNhdmUoKSAvLyBtdXN0IGJlIHNhdmVkIGJlZm9yZSByZWZyZXNoXG5cdFx0LnRoZW4oZnVuY3Rpb24oZGJJbnN0YW5jZSkge1xuXHRcdFx0cmV0dXJuIEluc3RhbmNlU3RyYXRlZ3kucmVmcmVzaCgpXG5cdFx0fSlcblx0XHQudGhlbihmdW5jdGlvbihyZWZyZXNoZWRJbnN0YW5jZSkge1xuXHRcdFx0ZXhwZWN0KEluc3RhbmNlU3RyYXRlZ3kuZGJJbnN0YW5jZS5hZ2UpXG5cdFx0XHRcdC50by5lcXVhbCgzMClcblx0XHRcdFx0ZG9uZSgpXG5cdFx0fSlcbiAgICBcbiAgfSk7XG5cblx0aXQoJ2NhbiB1cGRhdGUgaXRzIGluc3RhbmNlJywgZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIEluc3RhbmNlU3RyYXRlZ3kuc2F2ZSgpIC8vIG11c3QgYmUgc2F2ZWQgYmVmb3JlIHJlZnJlc2hcblx0XHQudGhlbihmdW5jdGlvbihpbnN0YW5jZSkge1xuXHRcdFx0ZXhwZWN0KEluc3RhbmNlU3RyYXRlZ3kuZGJJbnN0YW5jZS5hZ2UpLnRvLmVxdWFsKDI1KTtcblx0XHRcdHJldHVybiBJbnN0YW5jZVN0cmF0ZWd5LnVwZGF0ZSh7YWdlOjIwfSlcblx0XHR9KVxuXHRcdC50aGVuKGZ1bmN0aW9uKGluc3RhbmNlKSB7XG5cdFx0XHRleHBlY3QoaW5zdGFuY2UuZGJJbnN0YW5jZS5hZ2UpLnRvLmVxdWFsKDIwKTtcblx0XHR9KVxuXG5cdH0pXG5cdFxuXHRpdCgnY2FuIHNhdmUgaXRzIGluc3RhbmNlJywgZnVuY3Rpb24oKSB7XG5cdFx0ZXhwZWN0KEluc3RhbmNlU3RyYXRlZ3kuZGJJbnN0YW5jZS5hZ2UpLnRvLmVxdWFsKDI1KTtcblx0XHRJbnN0YW5jZVN0cmF0ZWd5LmRiSW5zdGFuY2UuYWdlID0gMjA7XG5cdFx0XG5cdFx0cmV0dXJuIEluc3RhbmNlU3RyYXRlZ3kuc2F2ZSgpXG5cdFx0LnRoZW4oZnVuY3Rpb24oaW5zdGFuY2UpIHtcblx0XHRcdGV4cGVjdChpbnN0YW5jZS5kYkluc3RhbmNlLmFnZSkudG8uZXF1YWwoMjApO1xuXHRcdH0pXG5cblx0fSlcblxuXG59KTsiXX0=