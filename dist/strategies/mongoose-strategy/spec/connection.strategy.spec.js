'use strict';

var assert = require('chai').assert;
var expect = require('chai').expect;

var mongoose = require("../index").dbManager;

describe('Connection Strategy', function () {
  var ConnectionConstructor = require('../proxy.connection');
  // Needed to get reference to mongoose the other way
  // ConnectionConstructor.prototype.dbManager = mongoose;

  var ProxyConnection = new ConnectionConstructor('mongodb://localhost:27017', 'proxyDb-mockMock');

  before(function (done) {
    mongoose.disconnect(done);
  });

  after(function (done) {
    mongoose.disconnect(done);
  });

  it('opens a connection to mongoose', function (done) {
    expect(ProxyConnection.dbConnection._readyState).to.equal(0);
    ProxyConnection.open(function () {
      expect(ProxyConnection.dbConnection._readyState).to.equal(1);
      done();
    });
  });

  it('closes a connection to mongoose', function (done) {
    expect(ProxyConnection.dbConnection._readyState).to.equal(1);
    ProxyConnection.close(function () {
      expect(ProxyConnection.dbConnection._readyState).to.equal(0);
      done();
    });
  });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3N0cmF0ZWdpZXMvbW9uZ29vc2Utc3RyYXRlZ3kvc3BlYy9jb25uZWN0aW9uLnN0cmF0ZWd5LnNwZWMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxJQUFNLFNBQVMsUUFBUSxNQUFSLEVBQWdCLE1BQS9CO0FBQ0EsSUFBTSxTQUFTLFFBQVEsTUFBUixFQUFnQixNQUEvQjs7QUFFQSxJQUFNLFdBQVcsUUFBUSxVQUFSLEVBQW9CLFNBQXJDOztBQUVBLFNBQVMscUJBQVQsRUFBZ0MsWUFBVztBQUN6QyxNQUFNLHdCQUF3QixRQUFRLHFCQUFSLENBQTlCO0FBQ0E7QUFDQTs7QUFFQSxNQUFNLGtCQUFrQixJQUFJLHFCQUFKLENBQTBCLDJCQUExQixFQUF1RCxrQkFBdkQsQ0FBeEI7O0FBRUEsU0FBTyxVQUFTLElBQVQsRUFBZTtBQUNwQixhQUFTLFVBQVQsQ0FBb0IsSUFBcEI7QUFDRCxHQUZEOztBQUlBLFFBQU0sVUFBUyxJQUFULEVBQWU7QUFDbkIsYUFBUyxVQUFULENBQW9CLElBQXBCO0FBQ0QsR0FGRDs7QUFJQSxLQUFHLGdDQUFILEVBQXFDLFVBQVMsSUFBVCxFQUFlO0FBQ2xELFdBQU8sZ0JBQWdCLFlBQWhCLENBQTZCLFdBQXBDLEVBQWlELEVBQWpELENBQW9ELEtBQXBELENBQTBELENBQTFEO0FBQ0Esb0JBQWdCLElBQWhCLENBQXFCLFlBQVc7QUFDOUIsYUFBTyxnQkFBZ0IsWUFBaEIsQ0FBNkIsV0FBcEMsRUFBaUQsRUFBakQsQ0FBb0QsS0FBcEQsQ0FBMEQsQ0FBMUQ7QUFDQTtBQUNELEtBSEQ7QUFJRCxHQU5EOztBQVFBLEtBQUcsaUNBQUgsRUFBc0MsVUFBUyxJQUFULEVBQWU7QUFDbkQsV0FBTyxnQkFBZ0IsWUFBaEIsQ0FBNkIsV0FBcEMsRUFBaUQsRUFBakQsQ0FBb0QsS0FBcEQsQ0FBMEQsQ0FBMUQ7QUFDQSxvQkFBZ0IsS0FBaEIsQ0FBc0IsWUFBVztBQUMvQixhQUFPLGdCQUFnQixZQUFoQixDQUE2QixXQUFwQyxFQUFpRCxFQUFqRCxDQUFvRCxLQUFwRCxDQUEwRCxDQUExRDtBQUNBO0FBQ0QsS0FIRDtBQUlELEdBTkQ7QUFVRCxDQWpDRCIsImZpbGUiOiJjb25uZWN0aW9uLnN0cmF0ZWd5LnNwZWMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBhc3NlcnQgPSByZXF1aXJlKCdjaGFpJykuYXNzZXJ0O1xuY29uc3QgZXhwZWN0ID0gcmVxdWlyZSgnY2hhaScpLmV4cGVjdDtcblxuY29uc3QgbW9uZ29vc2UgPSByZXF1aXJlKFwiLi4vaW5kZXhcIikuZGJNYW5hZ2VyO1xuXG5kZXNjcmliZSgnQ29ubmVjdGlvbiBTdHJhdGVneScsIGZ1bmN0aW9uKCkge1xuICBjb25zdCBDb25uZWN0aW9uQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuLi9wcm94eS5jb25uZWN0aW9uJyk7XG4gIC8vIE5lZWRlZCB0byBnZXQgcmVmZXJlbmNlIHRvIG1vbmdvb3NlIHRoZSBvdGhlciB3YXlcbiAgLy8gQ29ubmVjdGlvbkNvbnN0cnVjdG9yLnByb3RvdHlwZS5kYk1hbmFnZXIgPSBtb25nb29zZTtcblxuICBjb25zdCBQcm94eUNvbm5lY3Rpb24gPSBuZXcgQ29ubmVjdGlvbkNvbnN0cnVjdG9yKCdtb25nb2RiOi8vbG9jYWxob3N0OjI3MDE3JywgJ3Byb3h5RGItbW9ja01vY2snKVxuXG4gIGJlZm9yZShmdW5jdGlvbihkb25lKSB7XG4gICAgbW9uZ29vc2UuZGlzY29ubmVjdChkb25lKVxuICB9KVxuICBcbiAgYWZ0ZXIoZnVuY3Rpb24oZG9uZSkge1xuICAgIG1vbmdvb3NlLmRpc2Nvbm5lY3QoZG9uZSk7XG4gIH0pO1xuXG4gIGl0KCdvcGVucyBhIGNvbm5lY3Rpb24gdG8gbW9uZ29vc2UnLCBmdW5jdGlvbihkb25lKSB7XG4gICAgZXhwZWN0KFByb3h5Q29ubmVjdGlvbi5kYkNvbm5lY3Rpb24uX3JlYWR5U3RhdGUpLnRvLmVxdWFsKDApXG4gICAgUHJveHlDb25uZWN0aW9uLm9wZW4oZnVuY3Rpb24oKSB7XG4gICAgICBleHBlY3QoUHJveHlDb25uZWN0aW9uLmRiQ29ubmVjdGlvbi5fcmVhZHlTdGF0ZSkudG8uZXF1YWwoMSlcbiAgICAgIGRvbmUoKVxuICAgIH0pO1xuICB9KTtcblxuICBpdCgnY2xvc2VzIGEgY29ubmVjdGlvbiB0byBtb25nb29zZScsIGZ1bmN0aW9uKGRvbmUpIHtcbiAgICBleHBlY3QoUHJveHlDb25uZWN0aW9uLmRiQ29ubmVjdGlvbi5fcmVhZHlTdGF0ZSkudG8uZXF1YWwoMSlcbiAgICBQcm94eUNvbm5lY3Rpb24uY2xvc2UoZnVuY3Rpb24oKSB7XG4gICAgICBleHBlY3QoUHJveHlDb25uZWN0aW9uLmRiQ29ubmVjdGlvbi5fcmVhZHlTdGF0ZSkudG8uZXF1YWwoMClcbiAgICAgIGRvbmUoKVxuICAgIH0pO1xuICB9KVxuXG5cblxufSk7Il19